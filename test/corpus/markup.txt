================================================================================
Code Block
================================================================================

#{
let x = 1
}

#[
this is some text
]

--------------------------------------------------------------------------------

(source_file
 (code_block
  (let_declaration
    (identifier)
   (int_literal)))
 (paragraph_break)
 (content_block))


================================================================================
Markup Text
================================================================================

#let hello = "Hello, world!"

hello this is normal text! #hello is a variable.

testing that emojis work: âœŠðŸ˜—



#[hello world]


checking for paragraph breaks
#let what = 10

name

--------------------------------------------------------------------------------


(source_file
 (let_declaration
  (identifier)
  (string_literal))
 (paragraph_break)
 (identifier)
 (paragraph_break)
 (paragraph_break)
 (content_block)
 (paragraph_break)
 (let_declaration
  (identifier)
  (int_literal))
 (paragraph_break))

================================================================================
Set block markup and spacing
================================================================================

#set par(justify: true)
#set par(justify: true      )
#set par(
justify: true      )

#set par(
    // hello
    // hello
    // hello
    // hello
justify: true      )

#set par(
justify: true
)

#set par(
// hello new line
height: 10,
// hello new line
// hello new line
// hello new line
width: 10
// does this work?
)

#set par(
height: 10
// hello comment
// hello comment
// hello comment
)

#set par(
height: 10,
width: 10,
)

#set par(justify: true)
#set page(
  height: 100pt,
  margin: 20pt,
  footer: [
    #set align(right)
    #set text(8pt)
    #counter(page).display(
      "1 of I",
      both: true,
    )
  ]
)

#lorem(48)

--------------------------------------------------------------------------------

(source_file
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (line_comment)
        (line_comment)
        (line_comment)
        (line_comment)
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (line_comment)
        (asssigned_argument
          (identifier)
          (int_literal))
        (line_comment)
        (line_comment)
        (line_comment)
        (asssigned_argument
          (identifier)
          (int_literal))
        (line_comment))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (int_literal))
        (line_comment)
        (line_comment)
        (line_comment))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (int_literal))
        (asssigned_argument
          (identifier)
          (int_literal)))))
  (paragraph_break)
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (boolean_literal)))))
  (set_expression
    (function_call
      (identifier)
      (arguments
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (numeric
            (int_literal)
            (unit)))
        (asssigned_argument
          (identifier)
          (content_block
            (set_expression
              (function_call
                (identifier)
                (arguments
                  (argument
                    (identifier)))))
            (set_expression
              (function_call
                (identifier)
                (arguments
                  (argument
                    (numeric
                      (int_literal)
                      (unit))))))
            (method_call
              (function_call
                (identifier)
                (arguments
                  (argument
                    (identifier))))
              (identifier)
              (arguments
                (argument
                  (string_literal))
                (asssigned_argument
                  (identifier)
                  (boolean_literal)))))))))
  (paragraph_break)
  (function_call
    (identifier)
    (arguments
      (argument
        (int_literal)))))

================================================================================
Styling
================================================================================

"hello world"this works

"this is a quote with a \" inside"

"this is a quote with a \ inside"

Tweet at us \#ad <hashtag>

this should work <a_b_c>

Now citing @charlie _italic_ hello

_itatlic with a space_ now normal
_itatlic with an_underscore in the middle_ now normal
_itatlic with an\_ underscore in the middle_ now normal

*something* is bold
*_hello_* is bold and italic
_*hello*_ is bold and italic


================================================================================
Links
================================================================================

This is a test invalid://www.thisshouldbecomeacomment.com,
http://www.test.com, https://positive.com, http://

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (link)
  (link)
  (link))

